#!/usr/bin/perl -I t -I blib/arch -I ../blib/arch -I blib/lib -I ../blib/lib -I /usr/src/shogun/src/interfaces/perl_modular -I/usr/src/shogun/src/shogun
#use strict;

BEGIN { 
    require tests;
    eval 'require modshogun';
    unless ($@) {
#	plan tests => ,
	# todo => [37..40],
    } else {
	#plan tests => 1;
	print join(':', @INC);
	print "\n";
	print "LD_LIBRARY_PATH=".$ENV{LD_LIBRARY_PATH};
	print "\n";
	print "nok 1 # no modshogun support\n";
	exit;
    }
    use PDL::Stats::Basic;
    use PDL::Graphics::TriD;
    
}
#sequence(3,2)->slice("1:2,(0)") 
#gra_col;
$num_feats = 3; $dim_feats = 2;
$pfm = sequence($num_feats, $dim_feats);
$pfm_cov = $pfm->cov_table;

$ftype = 'Real';
&ok($sgfm = eval('modshogun::' . $ftype . 'Features')->new($pfm));

@dims=($pfm->dims());
&is($sgfm->get_num_vectors() , $dims[0]);
&is($sgfm->get_dim_feature_space(), $dims[1]);

$i = 0;
while($i < $num_feats) {
    &ok($v = $sgfm->get_feature_vector($i));

    push(@sgfv, $v);
    $pv = $pfm->slice('('.$i.')'));
    $veq=($v == $pfm->slice('('. $i .')'));

    $j = 0;
    while($j <  $dim_feats) {
	&is($v->at($j), $pfm->at($i,$j));

    } continue {
	$j++;
    }
} continue {
    $i++;
}

#mean #average
&ok($sgfmm = $sgfm->get_mean());

=pod

print $sgfmm
[2 3]

=cut

#$pfm->average
#[1 4]

&ok($sparse_fm=eval('modshogun::' .'Sparse'.$ftype.'Features')->new());
&ok($sparse_fm->obtain_from_simple($sgfm));

$r = eval $sgfm->benchmark_dense_dot_range(1);
&ok(!$@);

=pod

Time to process 1 x num=3 dense_dot_range ops: cputime 0.010000s walltime 0.209104s

=cut

$num = 0;
&ok($sgddf= $sgfm->get_computed_dot_feature_vector($num));


&ok($sgcov=$sgfm->get_cov);





#imag3d [SURF2D,bessj0(rvals(zeroes(50,50))/2)];
sub gra_col {
      # Generate a somewhat interesting sequence of points:
        $t = sequence(100)/10;
        $x = sin($t); $y = cos($t), $z = $t;
        $coords = cat($x, $y, $z)->xchg(0,1);
        $r = cos(2*$t); $g = sin($t); $b = $t;
        $colors = cat($r, $g, $b)->xchg(0,1);
       # After each graph, let the user rotate and
        # wait for him to press 'q', then make new graph
        line3d($coords);       # $coords = (3,n,...)
        line3d($coords,$colors);  # $colors = (3,n,...)
        line3d([$x,$y,$z]);
}

# ================================
# covariance: 
#
#   $Sigma = covariance( $X )
#
#   computes the Sample Covariance Matrix of
#   a sample X1...Xn of p-dimensional vectors
# ================================
sub covariance {
    my ( $X ) = @_;
    
    my $Diff = $X - average( $X->xchg(0,1) );
    
    my $Sigma = ( 1 / ( $X->getdim(1) - 1 ) )
                * transpose( $Diff ) x $Diff;
    
    return $Sigma;
}


END {
    done_testing(71);
}



__END__

  DB<10> x $ftrain->list_feature_obj()
  empty array
  DB<11> x $vm=$ftrain->get_mean
0  PDL=SCALAR(0x46161d8)
 
  DB<12> print $vm
[0.49686299 0.49541615 0.47722393 0.49865676 0.48293438 0.53052084 0.52081454 0.46588112  0.4499787 0.39246375 0.51486169]
  DB<13>  x $vm=$ftrain->get_cov
0  PDL=SCALAR(0x4616160)
   -> 49563296
  DB<14> x $vm=$ftrain->get_mean
0  PDL=SCALAR(0x4616508)
   -> 49543248
  DB<15>  x $vc=$ftrain->get_cov
0  PDL=SCALAR(0x46164a8)
   -> 49523984
  DB<16> print $cv

  DB<17> print $vc

[
 [    0.12666615   -0.016533385    0.035040993  -0.0012461355    0.021341082   0.0022772178 -0.00087986377    -0.05316227    0.032782853   -0.011502047   -0.016411632]
 [  -0.016533385    0.067333933    0.021061547  -0.0086650823   0.0084385616   -0.017201894   -0.026617544    0.017441558    0.036701509   0.0059561173   -0.025277569]
 [   0.035040993    0.021061547    0.082572968   0.0066880457  -0.0014253159   -0.025638399   -0.011830169   -0.030927149    0.043990513    0.022671761    -0.02748743]
 [ -0.0012461355  -0.0086650823   0.0066880457    0.066780393   -0.013010983   -0.010395527   0.0082140744  -0.0015113341    -0.01454206   0.0074974365   0.0012528672]
 [   0.021341082   0.0084385616  -0.0014253159   -0.013010983    0.078244574    0.015669285  -0.0081701441    0.018347545    0.023809073 -2.4144622e-05   -0.018879203]
 [  0.0022772178   -0.017201894   -0.025638399   -0.010395527    0.015669285    0.093523316  -0.0074835155   0.0079432493   0.0061304891   -0.018767136   0.0032894579]
 [-0.00087986377   -0.026617544   -0.011830169   0.0082140744  -0.0081701441  -0.0074835155     0.07834697    0.027805659  -0.0091284896    0.011170226    0.026646592]
 [   -0.05316227    0.017441558   -0.030927149  -0.0015113341    0.018347545   0.0079432493    0.027805659    0.079410381   0.0094527473   -0.018715407  0.00087251833]
 [   0.032782853    0.036701509    0.043990513    -0.01454206    0.023809073   0.0061304891  -0.0091284896   0.0094527473    0.085611548   -0.019382061   -0.017113942]
 [  -0.011502047   0.0059561173    0.022671761   0.0074974365 -2.4144622e-05   -0.018767136    0.011170226   -0.018715407   -0.019382061    0.092648524   -0.019389193]
 [  -0.016411632   -0.025277569    -0.02748743   0.0012528672   -0.018879203   0.0032894579    0.026646592  0.00087251833   -0.017113942   -0.019389193     0.08040745]
]


  DB<18> x $vt=$ftrain->get_feature_type
0  100
14 
16  enum EFeatureType
17  {
18  F_UNKNOWN = 0,
19  F_BOOL = 5,
20  F_CHAR = 10,
21  F_BYTE = 20,
22  F_SHORT = 30,
23  F_WORD = 40,
24  F_INT = 50,
25  F_UINT = 60,
26  F_LONG = 70,
27  F_ULONG = 80,
28  F_SHORTREAL = 90,
29  F_DREAL = 100,
30  F_LONGREAL = 110,
31  F_ANY = 100035  enum EFeatureClass
36  {
37  C_UNKNOWN = 0,
38  C_DENSE = 10,
39  C_SPARSE = 20,
40  C_STRING = 30,
41  C_COMBINED = 40,
42  C_COMBINED_DOT = 60,
43  C_WD = 70,
44  C_SPEC = 80,
45  C_WEIGHTEDSPEC = 90,
46  C_POLY = 100,
47  C_STREAMING_DENSE = 110,
48  C_STREAMING_SPARSE = 120,
49  C_STREAMING_STRING = 130,
50  C_STREAMING_VW = 140,
51  C_BINNED_DOT = 150,
52  C_DIRECTOR_DOT = 160,
53  C_LATENT = 170,
54  C_ANY = 1000
55  }; x $vt=$ftrain->get_feature_class
0  10



  DB<15>  x $vc=$ftrain->get_cov
0  PDL=SCALAR(0x46164a8)
   -> 49523984
  DB<16> print $cv

  DB<17> print $vc

[
 [    0.12666615   -0.016533385    0.035040993  -0.0012461355    0.021341082   0.0022772178 -0.00087986377    -0.05316227    0.032782853   -0.011502047   -0.016411632]
 [  -0.016533385    0.067333933    0.021061547  -0.0086650823   0.0084385616   -0.017201894   -0.026617544    0.017441558    0.036701509   0.0059561173   -0.025277569]
 [   0.035040993    0.021061547    0.082572968   0.0066880457  -0.0014253159   -0.025638399   -0.011830169   -0.030927149    0.043990513    0.022671761    -0.02748743]
 [ -0.0012461355  -0.0086650823   0.0066880457    0.066780393   -0.013010983   -0.010395527   0.0082140744  -0.0015113341    -0.01454206   0.0074974365   0.0012528672]
 [   0.021341082   0.0084385616  -0.0014253159   -0.013010983    0.078244574    0.015669285  -0.0081701441    0.018347545    0.023809073 -2.4144622e-05   -0.018879203]
 [  0.0022772178   -0.017201894   -0.025638399   -0.010395527    0.015669285    0.093523316  -0.0074835155   0.0079432493   0.0061304891   -0.018767136   0.0032894579]
 [-0.00087986377   -0.026617544   -0.011830169   0.0082140744  -0.0081701441  -0.0074835155     0.07834697    0.027805659  -0.0091284896    0.011170226    0.026646592]
 [   -0.05316227    0.017441558   -0.030927149  -0.0015113341    0.018347545   0.0079432493    0.027805659    0.079410381   0.0094527473   -0.018715407  0.00087251833]
 [   0.032782853    0.036701509    0.043990513    -0.01454206    0.023809073   0.0061304891  -0.0091284896   0.0094527473    0.085611548   -0.019382061   -0.017113942]
 [  -0.011502047   0.0059561173    0.022671761   0.0074974365 -2.4144622e-05   -0.018767136    0.011170226   -0.018715407   -0.019382061    0.092648524   -0.019389193]
 [  -0.016411632   -0.025277569    -0.02748743   0.0012528672   -0.018879203   0.0032894579    0.026646592  0.00087251833   -0.017113942   -0.019389193     0.08040745]
]


  DB<23> x $data_train->cov_table
0  PDL=SCALAR(0x4686db0)
   -> 68851840
  DB<24> x $pvc=$data_train->cov_table
0  PDL=SCALAR(0x462e4a8)
   -> 49433184
  DB<25> print $pvc

[
 [   0.094073174    0.002001962   -0.011876895   -0.018181802   -0.021774237  0.00014516862    0.021764912  -0.0037903962   0.0051052742   -0.012505604  -0.0056429692]
 [   0.002001962    0.081678032   0.0046915885   0.0022032977  -0.0050205974   -0.032394791   -0.015954469   -0.018783337    0.028375717   0.0011823511    0.013344083]
 [  -0.011876895   0.0046915885    0.057124586   -0.013473974 -0.00062268881    0.021694556   0.0054528726    0.034049718   -0.018640766   -0.015520312  -0.0074964207]
 [  -0.018181802   0.0022032977   -0.013473974    0.090883235   -0.026305332    0.011168948   -0.024471636   -0.021829189    0.019020093   0.0087634236   -0.014431619]
 [  -0.021774237  -0.0050205974 -0.00062268881   -0.026305332    0.082066945   -0.022319583    0.010545347    0.029321548  -0.0013989082  -0.0037019943   0.0077406341]
 [ 0.00014516862   -0.032394791    0.021694556    0.011168948   -0.022319583    0.088947926   -0.024717201     0.04471879  -0.0099738669  -0.0058539202   -0.013800218]
 [   0.021764912   -0.015954469   0.0054528726   -0.024471636    0.010545347   -0.024717201    0.094712786     0.01248175   -0.021891992  -0.0070312919   -0.019126177]
 [ -0.0037903962   -0.018783337    0.034049718   -0.021829189    0.029321548     0.04471879     0.01248175    0.095210769  -0.0046550026 -0.00057380028  -0.0031780112]
 [  0.0051052742    0.028375717   -0.018640766    0.019020093  -0.0013989082  -0.0099738669   -0.021891992  -0.0046550026    0.059374696    0.016788685    0.011807847]
 [  -0.012505604   0.0011823511   -0.015520312   0.0087634236  -0.0037019943  -0.0058539202  -0.0070312919 -0.00057380028    0.016788685    0.080492224   -0.016194268]
 [ -0.0056429692    0.013344083  -0.0074964207   -0.014431619   0.0077406341   -0.013800218   -0.019126177  -0.0031780112    0.011807847   -0.016194268     0.08588636]
]

  DB<26> x $pvc=$data_train->cov
Usage:  PDL::cov(a,b,c) (you may leave temporaries or output variables out of list) at (eval 89)[/usr/share/perl/5.14/perl5db.pl:640] line 2.
  DB<27> 


use PDL::Stats::Basic;
$pvc = $data_train->cov_table;

my $stdv = $data->stdv;perldl> p $a->dummy(2)->cov($a->dummy(1))     # 5 obs x 3 var, 2 such data tables

    perldl> $a = random 5, 3, 2

    perldl> p $cov = $a->cov_table
    [
     [
      [ 8.9636438 -1.8624472 -1.2416588]
      [-1.8624472  14.341514 -1.4245366]
      [-1.2416588 -1.4245366  9.8690655]
     ]
     [
      [   10.32644 -0.31311789 -0.95643674]
      [-0.31311789   15.051779  -7.2759577]
      [-0.95643674  -7.2759577   5.4465141]
     ]
    ]
    # diagonal elements of the cov table are the variances
    perldl> p $a->var
    [
     [ 8.9636438  14.341514  9.8690655]
     [  10.32644  15.051779  5.4465141]
    ]



int32_t num=get_num_vectors();
430  int32_t dim=get_dim_feature_space();
431  
    my $sgio =  $classifier->get_global_io();
+    $sgio->enable_progress();
+    $sgio->set_loglevel($modshogun::MSG_GCDEBUG);
